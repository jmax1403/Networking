COMMON METHODS FOR TRANSFERRING DATA
    TFTP
        UDP
        Very Small and simple protocol
        No Terminal Communication
        Insecure
        No directory Services
    FTP
        TCP (Uses multiple TCP connections)
        Authenticate through clear text sign in
        Has Directory services
        Anonymous login available
    Active
    Passive
    SFTP
        TCP transport (TCP port 22)
        Uses symmetric and asymmetric encryption
        Adds FTP like services to SSH
        Authentication through sign in (username and password) or with SSH key
        Interactive terminal access 
    SCP
       TCP port 22
       Authentication through sign in (username and password) or with SSH key
       Non-Interactive
       
       Examples
            scp student@172.16.82.106:secretstuff.txt /home/student
                Download a file from a remote directory to a local directory
                
            scp secretstuff.txt student@172.16.82.106:/home/student
                Upload a file to a remote directory from a local directory
             
            scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student
                Copy a file from a remote host to a separate remote host
            
        Alternate SSHD
            scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student
                Download a file from a remote directory to a local directory
                
            scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student
                Upload a file to a remote directory from a local directory
        SCP THROUGH Tunnels
            ssh student@172.16.82.106 -L 1111:localhost:22 -NT
            
            $ scp -P 1111 student@localhost:secretstuff.txt /home/student
                Download a file from a remote directory to a local directory
                
            $ scp -P 1111 secretstuff.txt student@localhost:/home/student
                Upload a file to a remote directory from a local directory
                
    
    NETCAT
        NETCAT is the "swiss army knife" networking utility which reads and writes data across network socket connections using the TCP/IP protocol.
        Can be used for the following:
            inbound and outbound connections, TCP/UDP, to or from any ports
            troubleshooting network connections
            sending/receiving data (insecurely)
            port scanning (similar to -sT in Nmap)

            Client (sends file): nc 10.2.0.2 9001 < file.txt
            Listener (receive file): nc -l -p 9001 > newfile.txt
            
        Relay Demos
            On Client relay
                mknod mypipe p OR mkfifo mypipe
                nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
            On Listener2 (sends)
                nc -l -p 9002 < infile.txt
            On Listener1 (receives)
                nc -l -p 9001 > outfile.txt
                
            writes the output to listener1 to listener2 through the named pipe
            
            
            
wget -r ftp://<ip>[:<alt port (if any)>]
    retrieves all files recursively on that device and puts them in a directory on your device named after the IP
