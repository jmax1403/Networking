https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T1_Filtering_Devices_Mechanisms&Layer.jpg
    Switch
        PACL & VACL     Layer 2
        ACL             Layer 3
    Router
        ACL             Layer 3 & 4
    Proxies
        URL and DNS Blacklists      \
        MIME filtering              --- Layers 3-7
        Keyword filtering           /
    Host Based Firewalls
        Rules           Layers 3-7
        
        
        
        
Filtering Concepts
    Whitelist - Only ALLOW X block all other 
    Blacklist - Only BLOCK X allow all other
    Network Device Operations Modes
        Routed
        Transparent
        
NetFilter Framework
    packet filtering
    stateless/stateful firewalls
    network address and port translation
    
    Netfilter Rules
        NF_IP_PRE_ROUTING → PREROUTING
            "Make some changes and send it on its way"
        NF_IP_LOCAL_IN → INPUT
        NF_IP_FORWARD → FORWARD
            "Not for me pass it on"
        NF_IP_LOCAL_OUT → OUTPUT
        NF_IP_POST_ROUTING → POSTROUTING
    Netfilter Paradigm
        tables - contain chains
        chains - contain rules
        rules - dictate what to match and what actions to perform on packets when packets match a rule
    Application tables and chains
        filter - default table. Provides packet filtering.
            INPUT, FORWARD, and OUTPUT
        nat - used to translate private ←→ public address and ports.
            PREROUTING, POSTROUTING, and OUTPUT
        mangle - provides special packet alteration. Can modify various fields header fields.
            All Chains: PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT.
        raw - used to configure exemptions from connection tracking.
            PREROUTING and OUTPUT
        security - used for Mandatory Access Control (MAC) networking rules.
            INPUT, FORWARD, and OUTPUT
            
            
IPTABLES
    sudo iptables -t [table] -A [chain] [rules] -j [action]
        CASE SENSITIVE
        
NFTABLES
    ip - IPv4 packets
    ip6 - IPv6 packets
    inet - IPv4 and IPv6 packets
    arp - layer 2
    bridge - processing traffic/packets traversing bridges.
    netdev - allows for user classification of packets - nftables passes up to the networking stack
    (no counterpart in iptables)
    
    CHAIN-TABLE-HOOKS
    https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T81_Fam_Chain_Hook.png
    
    
    
    
    
    DEMO
        iptables demo
            #iptables basics - listing tables/rules. Flushing Rules.
                sudo iptables -L
                    list iptables rules
                sudo iptables -t nat -L 
                    case sensitive. view other tables. i.e. nat
                sudo iptables -F
                    flushes the filter table
                    -t nat -F
                        flushes nat table
            #Create iptables rules to allow all types/directions of ssh traffic
                sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
                    accept inbound interface to destination port 22
                sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
                    accept outbound int from source port 22
                sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
                sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT
                
                sudo iptables -P INPUT DROP
                    changes all Policies in filters to DROP
                
                sudo iptables -A INPUT -p tcp -m multiport --ports 60106011,6012 -j ACCEPT
                sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010sudo apt-wwwwACCEPT
                    allows input and output from x11 forwarding
                for CHAIN in INPUT OUTPUT FORWARD;do sudo iptables -P $CHAIN DROP;done
                    set all filter rules to DROP
                        Can change to ACCEPT
                        
                        
            #BLOCK/ALLOW Specific IPs (Blakclisting and whitelisting)
                #Drop all in/out traffic from BH1 (172.16.82.106) but allow all in/out traffic from BH3 (172.16.82.112)
                    sudo iptables -I INPUT -s 172.16.82.106 -j DROP
                    sudo iptables -I OUTPUT -d 172.16.82.106 -j DROP
                    sudo iptables -A INPUT -s 172.16.82.112 -j ACCEPT
                    sudo iptables -A OUTPUT -d 172.16.82.112 -j ACCEPT 
                #Delete aniptables rule
                    sudo iptables -D OUTPUT 1
                    sudo iptables -D INPUT 1
                #Replace an iptables rule
                    sudo iptables -R INPUT 3 -s 172.16.82.106 -j ACCEPT
        
        NFTABLES
            #--TABLE FIRST
                sudo nft list tables
                sudo nft add table ip MYTABLE
                sudo nft list tables
                sudo nft flush table ip MYTABLE
                sudo nft delete table ip MYTABLE
            #--CLASS NEXT
                sudo nft add chain ip MYTABLE input { type filter hook input priority 0 \; policy accept \; }
                sudo nft add chain ip MYTABLE output { type filter hook output priority 0 \; policy accept \; }
                sudo nft list chains
            #explicitly open tcp port 22 as both src/dst in input/output
                    sudo nft insert rule ip MYTABLE input tcp dport 22 accept
                    sudo nft insert rule ip MYTABLE input tcp sport 22 accept
                    sudo nft insert rule ip MYTABLE output tcp dport 22 accept
                    sudo nft insert rule ip MYTABLE output tcp sport 22 accept
                sudo nft list ruleset -ann
                    check your work (like iptables -L)
            #--MORE RULES: block/allow specific ip addresses (blacklisting / whitelisting)
                
                sudo nft add rule ip MYTABLE input ip saddr 172.16.82.112 drop
                sudo nft add rule ip MYTABLE output ip daddr 172.16.82.112 drop
                sudo nft add rule ip MYTABLE output ip daddr 10.10.0.40 accept
                sudo nft add rule ip MYTABLE input ip saddr 10.10.0.40 accept
                
            Insert Rules
                sudo nft insert rule ip MYTABLE input position 4 ip saddr 172.16.82.112 drop
                
                
            Delete rules 
                sudo nft delete rule ip MYTABLE input handle 11
                
                
                
                
                
